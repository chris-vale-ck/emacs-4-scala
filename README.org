#+TITLE: Emacs Config for Scala programmers
#+AUTHOR: Chris Vale
#+EMAIL: crispywalrus@gmail.com
#+BABLE: :tangle yes
#+STARTUP: content
* Table Of Contents
** [[#about][About]]
** [[#emacs-config][Emacs]]
*** [[#init][Init]]
*** [[#version-control][Version Control]]
*** [[#scala-programming][Scala programming]]
*** [[#ensime][Ensime]]
*** [[#custom][Custom]]
** [[#sbt-config][SBT]]
*** [[#ensime][Ensime]]
*** [[#sbt-globals][Sbt Globals]]
    
* About
This is a basic configuration for emacs focused on those of us who use
scala primarily.

* Emacs

#+PROPERTY: header-args:elisp :tangle (prog1 ".emacs.d/init.el" (make-directory ".emacs.d" ".")) :results silent

** Init
This begins our section on basic emacs initialization and
configuration. The idea is that while raw emacs is a power house it
can take a while to get up to speed with it. We're going to go through
some basic setup with commentary so we can get to productive quickly.
#+BEGIN_SRC elisp
;; require is the equivalent of import, so we're importing emacs's
;; package configuration and management system
(require 'package)

;; find packages in melpa, melpa stable, or for org mode, orgmode over
;; elpa (or marmalade for that matter)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(setq package-archive-priorities
  '(("melpa-stable" . 1)
    ("org" . 2)))

;; start the package manager
(package-initialize)

;; make sure all packages we use "ensure" so they're always loaded

(setq use-package-always-ensure t)

;; we're going to be using use-package to define and load
;; packages. it's a code based configuration with a bunch of fancy
;; extensions
(when
    (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** Version Control

Lets setup git now. Magit will install it's documentation in info mode
so we're all good on learning how it works.

#+BEGIN_SRC elisp
(use-package magit
  :pin melpa-stable
  :commands magit-status magit-blame
  :init
  (setq magit-auto-revert-mode nil)
  (setq magit-last-seen-setup-instructions "1.4.0")
  :bind (("s-g" . magit-status)
         ("s-b" . magit-blame)))

(use-package magit-find-file)
(use-package gh)
(use-package magit-gh-pulls)
(use-package github-notifier)
(use-package git-auto-commit-mode)
(use-package git-timemachine)

#+END_SRC

** Scala programming

Lets handle scala coding right away here at the top level of our
initialization. 

** Ensime

The defacto development environment for scala in emacs
is ensime which relies on scala-mode and sbt-mode. 

#+BEGIN_SRC elisp ;; the packages listed here before ensime aren't
strictly speaking needing to be included manually. I've had issues in
the past with pinning them to stable when ensime is unpinned.
(use-package sbt-mode
  :pin melpa
  :commands sbt-start sbt-command)

(use-package scala-mode
  :pin melpa
  :interpreter ("scala" . scala-mode))

(use-package popup
  :pin melpa-stable)

(use-package ensime
  ;;  :pin melpa-stable
  :init
  (put 'ensime-auto-generate-config 'safe-local-variable #'booleanp)
  (setq
   ensime-startup-snapshot-notification nil
   ensime-startup-notification nil)
  :config
  (require 'ensime-expand-region)
  (add-hook 'git-timemachine-mode-hook (lambda () (ensime-mode 0))))
#+END_SRC

** Custom

using a custom.el to hold auto-generated custom settings isn't really
needed. it is a lot cleaner though and makes your init.el easier to
version.

#+BEGIN_SRC elisp 
(use-package f)

(setq custom-file (prog1
  (expand-file-name "custom.el" user-emacs-directory)
  (f-touch (expand-file-name "custom.el" user-emacs-directory))))
#+END_SRC

* SBT

*** Ensime

The defacto development environment for scala in emacs
is ensime which relies on scala-mode and sbt-mode. In order to use
ensime we need to add it's emacs mode but we also need to add the
project generator plugin to our sbt projects. The easiest way to do
that is to add the plugin to all sbt projects globally. Since we're
here lets also add some other fun (and useful) plugins.

#+BEGIN_SRC scala :tangle  (prog1 ".sbt/0.13/plugins/plugins.sbt" (make-directory ".sbt/0.13/plugins" "."))

addSbtPlugin("io.spray" % "sbt-revolver" % "0.8.0")
addSbtPlugin("com.eed3si9n" % "sbt-dirty-money" % "0.1.0")
addSbtPlugin("org.ensime" % "sbt-ensime" % "1.12.11")
addSbtPlugin("com.softwaremill.clippy" % "plugin-sbt" % "0.5.3")

#+END_SRC

*** Sbt Globals

#+BEGIN_SRC scala :tangle  (prog1 ".sbt/0.13/globals.sbt" (make-directory ".sbt/0.13" "."))
import org.ensime.EnsimeKeys._
import org.ensime.EnsimeCoursierKeys._

// this loads the current development version of ensime, which is the
// one you want. really, it is so don't worry about it.
ensimeServerVersion in ThisBuild := "2.0.0-SNAPSHOT"

// if this isn't set then ensime will create 2.11 and 2.12 specific
// directories for you in your tree :(
ensimeIgnoreMissingDirectories in ThisBuild := true
#+END_SRC





